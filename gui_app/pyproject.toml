[build-system] # https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
requires = ["poetry-core", "wheel"]
build-backend = "poetry.core.masonry.api"

[tool.poetry] # https://python-poetry.org/docs/pyproject/
name = "gui_app"
version = "0.1.0"
description = ""
authors = ["epicmobile <epicmobile181@gmail.com>"]
readme = "README.md"
# packages = [{include = "app", from = "src"}]
packages = [
  { include = "gui_app", from = "." },
  { include = "utils", from = "../" },

  # ,{ include="conf", from="." }
]
# maintainers = ["Lari Liuhamo <lari.liuhamo+pypi@gmail.com>",]
include = ['CHANGELOG.md', 'LICENSE', 'py.typed']
license = 'MIT'
# homepage = 'https://pypi.org/project/project-name/'
# repository = 'https://github.com/Diapolo10/project-name'
# documentation = 'https://github.com/Diapolo10/project-name/tree/main/docs'
keywords = ['python3', 'ai']
classifiers = [
  # 'Development Status :: 3 - Alpha',
  # 'License :: OSI Approved :: MIT License',
  # 'Operating System :: OS Independent',
  'Programming Language :: Python :: 3.8',
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12',
  'Programming Language :: Python :: Implementation :: CPython',
  'Programming Language :: Python :: Implementation :: PyPy',
  'Typing :: Typed',
]

[tool.poetry.dependencies] # https://python-poetry.org/docs/dependency-specification/
#python = "^3.12"
#python = "~3.11"
python = ">=3.10,<4.0" ## autogluon (1.0.1b20231216) requires Python >=3.10
# gradio = "^4.12.0"     ## autogluon 을 먼저 깔아버리면 종속성 error가 발생함; 패키지 설치 순서도 중요한듯;
#huggingface
#transformers = "^4.36.2"
#pre-commit = "^3.6.0"
# package-b = {path="../package-b", develop=true}

# [tool.poetry.dev-dependencies]   Poetry pre-1.2.x style, understood by Poetry 1.0–1.2
## Poetry will slowly transition away from the dev-dependencies notation which will soon be deprecated
## https://python-poetry.org/docs/managing-dependencies/#dependency-groups
streamlit = "^1.37.0"
elasticsearch = "^8.12.0"
cloudwatch = "^1.2.1"
python-dotenv = "^1.0.1"
zipp = "^3.17.0"

[tool.poetry.group.dev.dependencies]
mypy = "^1.8.0"
flake8 = "^6.0.0"
isort = "^5.12.0"
pytest = "^7.3.2"
black = "^23.12.0"
# jupyter = "^1.0.0"
jupyterlab = ">=3 <5"
ipykernel = "^6.27.1"
xeus-python = "^0.15.2"
# nb_conda_kernels   conda에서만 설치가능
# jupyterthemes = "^0.2"
debugpy = { version = "^1.7.0", optional = true }
pre-commit = "^3.6.0"


[tool.poetry.scripts] # https://python-poetry.org/docs/pyproject/#scriptsopenpyxl
# poetry run my_command
# my_command = "my_sub_package.my_func:hello"
#devtest = { reference = "mypackage:test.run_tests", extras = ["test"], type = "console" }
#test = "conf.command:run_pytest"
#cov = "conf.command:check_coverage"
#start = "conf.command:run_server"
## linux man페이지에 보면 command 이름이 길면 -으로 단어사이에 사용함
#app-start = "app.app:main"
start = "gradio_gui.app:main"
## poetry run error - Bad script (start-staging): script needs to specify a function within a module like: module(.submodule):function
# start-staging = "PYTHON_ENV=staging python -m streamlit run ./gui_app/streamlit/streamlit_app_mainpage.py --server.runOnSave true"


[tool.coverage.report] # https://coverage.readthedocs.io/en/latest/config.html#report
precision = 1
show_missing = true
skip_covered = true

# [tool.coverage.run]
# branch = true
# relative_files = true
# omit = [
#     '.tox/*',
#     'tests/*',
# ]
# source = ["src"]

# [tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/config.html#xml
# output = "reports/coverage.xml"


[tool.black]
skip-string-normalization = true
exclude = '/(tests/hooks-abort-render/hooks|docs\/HelloCookieCutter1)/'
line-length = 88
target-version = ['py39']
# quiet = true


[tool.isort]
profile = "black"


[tool.pytest.ini_options] # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
minversion = '6.0'
# addopts = "--color=yes --doctest-modules --exitfirst --failed-first --verbosity=2 --junitxml=reports/pytest.xml"
addopts = """
--strict-markers \

-r sxX
--show-capture=log
--doctest-modules \
--cov=./ \
--cov-append \
--cov-report html:tests/reports/coverage-html \
--cov-report xml:tests/reports/coverage.xml \
--ignore=docs/
--no-cov-on-fail
"""
testpaths = ['tests']
cache_dir = ".cache/pytest/"
markers = []
xfail_strict = true
filterwarnings = ["error"]


[tool.ruff] # https://github.com/charliermarsh/ruff
fix = true
select = [
  'A',   # Builtins
  'ANN', # Annotations
  'ARG', # Unused arguments
  'B',   # Bugbear
  'BLE', # Blind except
  'C4',  # Comprehensions
  'C90', # mccabe
  'COM', # Commas
  'D1',  # Undocumented public elements
  'D2',  # Docstring conventions
  'D3',  # Triple double quotes
  'D4',  # Docstring text format
  'DTZ', # Datetimes
  'EM',  # Error messages
  'ERA', # Commented-out code
  'EXE', # Executable
  'F',   # Pyflakes
  'FA',  # __future__ annotations
  'FLY', # F-strings
  # 'FURB', # Refurb
  'G',   # Logging format
  'I',   # Isort
  'ICN', # Import conventions
  'INP', # Disallow PEP-420 (Implicit namespace packages)
  'INT', # gettext
  'ISC', # Implicit str concat
  # 'LOG',  # Logging
  'N',    # PEP-8 Naming
  'NPY',  # Numpy
  'PERF', # Unnecessary performance costs
  'PGH',  # Pygrep hooks
  'PIE',  # Unnecessary code
  'PL',   # Pylint
  'PT',   # Pytest
  'PTH',  # Use Pathlib
  'PYI',  # Stub files
  'Q',    # Quotes
  'RET',  # Return
  'RUF',  # Ruff
  'RSE',  # Raise
  'S',    # Bandit
  'SIM',  # Code simplification
  'SLF',  # Private member access
  'SLOT', # __slots__
  'T10',  # Debugger
  'T20',  # Print
  'TCH',  # Type checking
  'TID',  # Tidy imports
  'TRY',  # Exception handling
  'UP',   # Pyupgrade
  'W',    # Warnings
  'YTT',  # sys.version
]
ignore = [
  "E501",
  "PGH001",
  "PGH002",
  "PGH003",
  "RET504",
  "S101",
  'D203',    # One blank line before class docstring
  'D212',    # Multi-line summary first line
  'PLR0913', # Too many arguments
  'Q000',    # Single quotes found but double quotes preferred
]
unfixable = ["F401", "F841"]
ignore-init-module-imports = true
line-length = 120
# preview = true
show-fixes = true
src = ['src', "tests"]
target-version = 'py38'

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-quotes]
docstring-quotes = 'double'
multiline-quotes = 'double'

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.per-file-ignores]
# https://beta.ruff.rs/docs/rules/
'__init__.py' = ['F401', 'F403', 'F405']
'tests/*' = ['ANN', 'ARG', 'INP001', 'S101']

[tool.ruff.pylint]
max-args = 15
max-branches = 20
max-returns = 10
max-statements = 80


[tool.poe.tasks] # https://github.com/nat-n/poethepoet
## https://stackoverflow.com/a/70523184

## tool.poe.tasks.streamlit_start_staging ##
streamlit_start_staging.cmd = "python -m streamlit run ./gui_app/streamlit/streamlit_app_mainpage.py --server.runOnSave true"
# serve.script  = "myapp:run"
streamlit_start_staging.env = { PYTHON_ENV = "staging" }
streamlit_start_staging.envfile = "staging.env"

[tool.poe.tasks.docs]
help = "Generate this package's docs"
cmd = """
    pdoc
      --docformat $docformat
      --output-directory $outputdirectory
      my_package
    """

[[tool.poe.tasks.docs.args]]
help = "The docstring style (default: numpy)"
name = "docformat"
options = ["--docformat"]
default = "numpy"

[[tool.poe.tasks.docs.args]]
help = "The output directory (default: docs)"
name = "outputdirectory"
options = ["--output-directory"]
default = "docs"

[tool.poe.tasks.lint]
help = "Lint this package"

[[tool.poe.tasks.lint.sequence]]
cmd = """
      pre-commit run
        --all-files
        --color always
      """

[tool.poe.tasks.test]
help = "Test this package"

[[tool.poe.tasks.test.sequence]]
cmd = "coverage run"

[[tool.poe.tasks.test.sequence]]
cmd = "coverage report"

[[tool.poe.tasks.test.sequence]]
cmd = "coverage xml"


[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38, py39, py310, py311, pypy3
skip_missing_interpreters = true

[gh-actions]
python =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
    pypy-3.10: pypy3

[testenv]
passenv = GITHUB_*
allowlist_externals = poetry

commands =
    poetry run pytest
    poetry run coverage report
"""

# [tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html
# junit_xml = "reports/mypy.xml"
# ignore_missing_imports = true
# pretty = true
# show_column_numbers = true
# show_error_codes = true
# show_error_context = true
# warn_unreachable = true
# ignore_missing_imports = true
# no_implicit_optional = true
# check_untyped_defs = true

# cache_dir = ".cache/mypy/"
