[build-system] # https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
requires = ["poetry-core", "wheel"]
build-backend = "poetry.core.masonry.api"

[tool.poetry] # https://python-poetry.org/docs/pyproject/
name = "oasst_preprocessor"
version = "0.1.0"
description = ""
authors = ["epicmobile <epicmobile181@gmail.com>"]
readme = "README.md"
# packages = [{include = "app", from = "src"}]
packages = [
    { include = "oasst_maker", from = "." },
    { include = "oasst_preprocesser", from = "." },
    { include = "gui_app", from = "../" },
    { include = "utils", from = "../" },

    # ,{ include="conf", from="." }
]
# maintainers = ["Lari Liuhamo <lari.liuhamo+pypi@gmail.com>",]
include = ['CHANGELOG.md', 'LICENSE', 'py.typed']
license = 'MIT'
# homepage = 'https://pypi.org/project/project-name/'
# repository = 'https://github.com/Diapolo10/project-name'
# documentation = 'https://github.com/Diapolo10/project-name/tree/main/docs'
keywords = ['python3', 'ai']
classifiers = [
    # 'Development Status :: 3 - Alpha',
    # 'License :: OSI Approved :: MIT License',
    # 'Operating System :: OS Independent',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: Implementation :: CPython',
    'Programming Language :: Python :: Implementation :: PyPy',
    'Typing :: Typed',
]

## https://python-poetry.org/docs/cli/#install
[tool.poetry.dependencies] # https://python-poetry.org/docs/dependency-specification/
#python = "^3.12"
#python = "~3.11"
#python = ">=3.10 <3.12" ## autogluon (1.0.1b20231216) requires Python >=3.8, <3.12
python = ">=3.10,<4.0" ## autogluon (1.0.1b20231216) requires Python >=3.8, <3.12
# pip = ">=23 <25"  ## autogluon (1.0.1b20231216) requires Python >=3.8, <3.12
pip = ">=23" ## autogluon (1.0.1b20231216) requires Python >=3.8, <3.12
# gradio = "^4.12.0"      ## autogluon 을 먼저 깔아버리면 종속성 error가 발생함; 패키지 설치 순서도 중요한듯;
#huggingface
#transformers = "^4.36.2"
#pre-commit = "^3.6.0"
urllib3 = "^1.26.16" # Needed cause of a bug in poetry   https://github.com/python-poetry/poetry/issues/7936

# idna>=2.*
duckdb = "^1.0"
pyarrow = "^17.0.0"
pandas = "^2"
beautifulsoup4 = "^4.10.0"
# kiwipiepy
# mecab-python3
lxml = "^5.3.0"
Bottleneck = "^1.4.0" ## UserWarning: Pandas requiires version '1.3.6' or newer of 'bottleneck' (version '1.3.5' currently installed).

# [tool.poetry.dev-dependencies]   Poetry pre-1.2.x style, understood by Poetry 1.0–1.2
## Poetry will slowly transition away from the dev-dependencies notation which will soon be deprecated
## https://python-poetry.org/docs/managing-dependencies/#dependency-groups
# streamlit = "^1.29.0"
# elasticsearch = "^8.12.0"
# cloudwatch = "^1.2.1"
python-dotenv = "^1.0.1"
dotenv-cli = "^3.3.1"

## `poetry install --with test,docs` `poetry install --only test,docs` 로 설치 가능
[tool.poetry.group.dev.dependencies]
mypy = "^1.8.0"
flake8 = "^6.0.0"
isort = "^5.12.0"
pytest = "^7.3.2"
black = "^23.12.0"
# jupyter = "^1.0.0"
# jupyterlab = ">=3"
# ipykernel = "^6.27.1"
# xeus-python = "^0.15.2"
# nb_conda_kernels   conda에서만 설치가능
# jupyterthemes = "^0.2"
debugpy = { version = "^1.7.0", optional = true }
# pre-commit = "^3.6.0"
poethepoet = "^0.27.0"
## `poetry run poe` 로 실행 가능
# gitlint = "^0.19.0" # https://pypi.org/project/gitlint/
# commit-linter = "^1.0.0" # https://github.com/Hoopher/commit-linter
# poetry-pre-commit-plugin = "^0.1.2"

[tool.poetry.scripts] # https://python-poetry.org/docs/pyproject/#scriptsopenpyxl
# poetry run my_command
# my_command = "my_sub_package.my_func:hello"
#devtest = { reference = "mypackage:test.run_tests", extras = ["test"], type = "console" }
#test = "conf.command:run_pytest"
#cov = "conf.command:check_coverage"
#start = "conf.command:run_server"
## linux man페이지에 보면 command 이름이 길면 -으로 단어사이에 사용함
#app-start = "app.app:main"
# start = "gradio_gui.app:main"


[tool.coverage.report] # https://coverage.readthedocs.io/en/latest/config.html#report
precision = 1
show_missing = true
skip_covered = true

# [tool.coverage.run]
# branch = true
# relative_files = true
# omit = [
#     '.tox/*',
#     'tests/*',
# ]
# source = ["src"]

# [tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/config.html#xml
# output = "reports/coverage.xml"


[tool.black]
skip-string-normalization = true
exclude = '/(tests/hooks-abort-render/hooks|docs\/HelloCookieCutter1)/'
# line-length = 88
line-length = 160
## black 의 line-length을 생략하는 경우, flake8 pylint에서 막혀서 pre-commit 과정에서 코드가 수정되지 않습니다.
target-version = ['py39', 'py310']
# quiet = true


[tool.isort]
profile = "black"


[tool.pytest.ini_options] # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
minversion = '6.0'
# addopts = "--color=yes --doctest-modules --exitfirst --failed-first --verbosity=2 --junitxml=reports/pytest.xml"
# addopts = """
# --strict-markers \

# -r sxX
# --show-capture=log
# --doctest-modules \
# --cov=./ \
# --cov-append \
# --cov-report html:tests/reports/coverage-html \
# --cov-report xml:tests/reports/coverage.xml \
# --ignore=docs/
# --no-cov-on-fail
# """
testpaths = ['tests']
cache_dir = ".cache/pytest/"
markers = []
xfail_strict = true
filterwarnings = ["error"]

[tool.ruff] # https://github.com/charliermarsh/ruff
fix = true
select = [
    'A',   # Builtins
    'ANN', # Annotations
    'ARG', # Unused arguments
    'B',   # Bugbear
    'BLE', # Blind except
    'C4',  # Comprehensions
    'C90', # mccabe
    'COM', # Commas
    'D1',  # Undocumented public elements
    'D2',  # Docstring conventions
    'D3',  # Triple double quotes
    'D4',  # Docstring text format
    'DTZ', # Datetimes
    'EM',  # Error messages
    'ERA', # Commented-out code
    'EXE', # Executable
    'F',   # Pyflakes
    'FA',  # __future__ annotations
    'FLY', # F-strings
    # 'FURB', # Refurb
    'G',   # Logging format
    'I',   # Isort
    'ICN', # Import conventions
    'INP', # Disallow PEP-420 (Implicit namespace packages)
    'INT', # gettext
    'ISC', # Implicit str concat
    # 'LOG',  # Logging
    'N',    # PEP-8 Naming
    'NPY',  # Numpy
    'PERF', # Unnecessary performance costs
    'PGH',  # Pygrep hooks
    'PIE',  # Unnecessary code
    'PL',   # Pylint
    'PT',   # Pytest
    'PTH',  # Use Pathlib
    'PYI',  # Stub files
    'Q',    # Quotes
    'RET',  # Return
    'RUF',  # Ruff
    'RSE',  # Raise
    'S',    # Bandit
    'SIM',  # Code simplification
    'SLF',  # Private member access
    'SLOT', # __slots__
    'T10',  # Debugger
    'T20',  # Print
    'TCH',  # Type checking
    'TID',  # Tidy imports
    'TRY',  # Exception handling
    'UP',   # Pyupgrade
    'W',    # Warnings
    'YTT',  # sys.version
]
ignore = [
    "E501",
    "PGH001",
    "PGH002",
    "PGH003",
    "RET504",
    "S101",
    'D203',    # One blank line before class docstring
    'D212',    # Multi-line summary first line
    'PLR0913', # Too many arguments
    'Q000',    # Single quotes found but double quotes preferred
]
unfixable = ["F401", "F841"]
ignore-init-module-imports = true
line-length = 120
# preview = true
show-fixes = true
src = ['src', "tests"]
target-version = 'py38'

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-quotes]
docstring-quotes = 'double'
multiline-quotes = 'double'

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.per-file-ignores]
# https://beta.ruff.rs/docs/rules/
'__init__.py' = ['F401', 'F403', 'F405']
'tests/*' = ['ANN', 'ARG', 'INP001', 'S101']

[tool.ruff.pylint]
max-args = 15
max-branches = 20
max-returns = 10
max-statements = 80


[tool.poe.tasks] # https://github.com/nat-n/poethepoet
## https://stackoverflow.com/a/70523184
[tool.poe.tasks.docs]
help = "Generate this package's docs"
cmd = """
    pdoc
      --docformat $docformat
      --output-directory $outputdirectory
      my_package
    """

[[tool.poe.tasks.docs.args]]
help = "The docstring style (default: numpy)"
name = "docformat"
options = ["--docformat"]
default = "numpy"

[[tool.poe.tasks.docs.args]]
help = "The output directory (default: docs)"
name = "outputdirectory"
options = ["--output-directory"]
default = "docs"

[tool.poe.tasks.lint]
help = "Lint this package"

[[tool.poe.tasks.lint.sequence]]
cmd = """
      pre-commit run
        --all-files
        --color always
      """

[tool.poe.tasks.test]
## `poetry run poe test` OR `poe test`
help = "Test this package"
# envfile = ".env"
cmd = "pytest -v tests" # "pytest --cov=my_app"
# cmd = pytest --cov=my_app -v tests --maxfail=2 --disable-warnings

## https://poethepoet.natn.io/tasks/task_types/sequence.html
## `poe test` will run the following commands in sequence
# [[tool.poe.tasks.test.sequence]]
# # cmd = "coverage run"
# cmd = "dotenv -f .env run coverage run"

# [[tool.poe.tasks.test.sequence]]
# # cmd = "coverage report"
# cmd = "dotenv -f .env run coverage report"

# [[tool.poe.tasks.test.sequence]]
# cmd = "coverage xml"

## https://poethepoet.natn.io/tasks/task_types/ref.html
# do_things.cmd = "do_cmd"
# do_things.args = [{ name = "things", multiple = true, positional = true }]

# do_specific_things.ref = "do_things thing1 thing2"
# do_specific_things.env = { URGENCY = "11" }
## In the above example calling: `poe do_specific_things` would be equivalent to executing the following in the shell: `URGENCY=11 do_cmd thing1 thing2`


[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38, py39, py310, py311, pypy3
skip_missing_interpreters = true

[gh-actions]
python =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
    pypy-3.10: pypy3

[testenv]
passenv = GITHUB_*
allowlist_externals = poetry

commands =
    poetry run pytest
    poetry run coverage report
"""

# [tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html
# junit_xml = "reports/mypy.xml"
# ignore_missing_imports = true
# pretty = true
# show_column_numbers = true
# show_error_codes = true
# show_error_context = true
# warn_unreachable = true
# ignore_missing_imports = true
# no_implicit_optional = true
# check_untyped_defs = true

# cache_dir = ".cache/mypy/"
