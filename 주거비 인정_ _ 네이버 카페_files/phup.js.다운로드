/*!phup.js#v0.2.2*/
/*global define,window,document,XMLHttpRequest,ActiveXObject */
(function() {
  "use strict";
  var Phup = function() {
    var makeUniqueId = function() {
        return new Date().getMilliseconds() + Math.floor(Math.random() * 100000);
      },
      /**
       * iframe 업로드를 위한 hidden frame
       * CORS가 지원되지 않는 IE8 미만에서 async 구현을 위해 사용
       */
      appendHiddenFrame = function(target, src) {
        var hiddenFrame = document.createElement("iframe");
        hiddenFrame.src = src;
        hiddenFrame.style.display = "none";
        hiddenFrame.style.position = "absolute";
        hiddenFrame.style.width = "1px";
        hiddenFrame.style.height = "1px";
        hiddenFrame.style.left = "-100px";
        hiddenFrame.style.top = "-100px";
        target.appendChild(hiddenFrame);
        return hiddenFrame;
      },
      /**
       * iframe 업로드 결과 파싱
       */
      parseHashResult = function(index, resultString) {
        var result = {},
          resultArr = resultString.split("|"),
          i,
          kv,
          prevKey;

        for (i = 0; i < resultArr.length; i += 1) {
          kv = resultArr[i].split("=");
          if (!kv[1]) {
            result[prevKey] = result[prevKey] + "|" + kv[0];
            continue;
          } else if (kv[0] === "exif") {
            result[kv[0]] = kv[1].replace(/&quot;/g, "\"");
          } else if (/^[0-9]+$/.test(kv[1]) === true) {
            result[kv[0]] = parseInt(kv[1]);
          } else {
            result[kv[0]] = kv[1];
          }
          prevKey = kv[0];
        }
        result.index = index;
        return result;
      },
      /**
       * ajax 업로드 결과 파싱
       */
      parseXMLResult = function(index, resultString) {
        var result = {},
          resultArr,
          i,
          kv;
        resultArr = resultString.replace("<![CDATA[", "").replace("]]>", "").match(/<?[^>]*?>([\S\s]*)/)[1].match(/<([^>]*)>([^<]*)<\/([^>]*)>/g);
        for (i = 0; i < resultArr.length; i += 1) {
          kv = resultArr[i].match(/<([^>]*)>([^<]*)<\/[^>]*>/);
          if (kv[1] === "exif") {
            kv[2] = kv[2].replace(/&quot;/g, "\"");
          }

          if (kv[1] === "index") {
            result[kv[1]] = parseInt(kv[2], 10);
          } else if (kv[1] === "width") {
            result[kv[1]] = parseInt(kv[2], 10);
          } else if (kv[1] === "height") {
            result[kv[1]] = parseInt(kv[2], 10);
          } else if (kv[1] === "fileSize") {
            result[kv[1]] = parseInt(kv[2], 10);
          } else if (kv[1] === "convertedFileSize") {
            result[kv[1]] = parseInt(kv[2], 10);
          } else if (kv[1] === "animatedCnt") {
            result[kv[1]] = parseInt(kv[2], 10);
          } else if (kv[1] === "checkHarm") {
            result[kv[1]] = (kv[2] == "true");
          } else {
            result[kv[1]] = kv[2];
          }
        }

        if (result.code === undefined) {
          result.code = "IMAGE";
        } else {
          result = {index: index, code: result.code};
        }
        return result;
      },
      getProtocol = function(sslEnabled) {
        if (sslEnabled) {
          return "https:";
        } else {
          return "http:";
        }
      },
      getXHR = function() {
        var httpRequest;
        try {
          if (window.XMLHttpRequest) { // Mozilla, Safari, ...
            httpRequest = new XMLHttpRequest();
          } else if (window.ActiveXObject) { // IE
            try {
              httpRequest = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (err) {
              httpRequest = new ActiveXObject("Microsoft.XMLHTTP");
            }
          }
        } finally {
          // 지원되지 않은 경우에는 undefined
          return httpRequest;
        }
      },
      isAllowedImageType = function(name, allowedImageType) {
        var ext = name.substring(name.lastIndexOf(".") + 1).toLowerCase(),
          i;
        for (i = 0; i < allowedImageType.length; i += 1) {
          if (ext === allowedImageType[i]) {
            return true;
          }
        }
        return false;
      },
      uploadByAjax = function(el, index, file, handler, actionURL, timeout, onstart) {
        var xhr = getXHR(),
          formData = new window.FormData();
        formData.append("image", file);

        xhr.onload = function() {
          if (xhr.status === 200) {
            el.value = null;
            handler(parseXMLResult(index, xhr.responseText));
          } else {
            handler({index: index, code: "CLIENT"});
          }
        };
        xhr.open("POST", actionURL, true);
        onstart && onstart({
          el: el,
          index: index,
          fileName: file.name,
          xhr: xhr
        });

        if (timeout.millisecond > 0) {
          xhr.timeout = timeout.millisecond;
          xhr.ontimeout = function() {
            timeout.handler({index: index, fileName: file.name});
          };
        }

        xhr.send(formData);
      },
      getActionURL = function(options) {
        return getProtocol(options.sslEnabled) + "//" + options.domain + "/" + options.sessionKey + "/simpleUpload/" + options.index + "?userId=" + options.userId + "&extractExif=" + options.extractExif + "&extractAnimatedCnt=" + options.extractAnimatedCnt + "&autorotate=" + options.autorotate + "&extractDominantColor=" + options.extractDominantColor + "&type=" + options.type;
      },
      isCorsCapable = function() {
        return /naver\.net$/.test(document.domain)
          || /naver\.com$/.test(document.domain)
          || /navercorp\.com$/.test(document.domain)
          || /arcadur\.com$/.test(document.domain)
          || /webtoons\.com$/.test(document.domain)
          || /linedict\.com$/.test(document.domain)
          || /pholar\.co$/.test(document.domain)
          || /vlive\.tv$/.test(document.domain)
          || /line\.me$/.test(document.domain)
          || /modoo\.at$/.test(document.domain);
      },
      /**
       * config 설정된 element 히스토리를 유지
       */
      boundElements = [],
      getIframeCallback = function(options) {
        return function(resultString) {
          // 타임아웃 체크를 위해 플래그 사용
          options.done = true;
          options.handler(parseHashResult(options.index, resultString));

          // delete는 IE9+에서만 지원되며 성능에 영향을 미칠 수 있으므로 null 할당으로 대체
          window[options.callback] = null;
        };
      },
      handleIframeTimeout = function(options) {
        if (options.millisecond > 0) {
          setTimeout(function() {
            if (!options.done) {
              // 바로 null을 할당해버리면 나중에 iframe에서 콜백이 실행될 때 스크립트 에러 발생
              window[options.callback] = function() {
                window[options.callback] = null;
              };
              options.timeoutHandler({index: options.index, fileName: options.fileName});
            }
          }, options.millisecond);
        }
      },
      validateEl = function(options) {
        // input이 빈 경우는 패스
        if (options.el.value === "") {
          return false;
        }

      },
      validateSessionKey = function(options) {
        // sessionKey가 비어있으면 에러 처리
        if (!options.sessionKey) {
          options.handler({code: "FAIL_TO_GET_SESSION_KEY"});
          return false;
        }
      },
      validateIframe = function(options) {
        if (!options.form) {
          options.handler({code: "FAIL_TO_LOAD_IFRAME"});
          return false;
        }

        // input 검증
        if (isAllowedImageType(options.imageFileName, options.allowedImageType) === false) {
          options.handler({code: "UNSUPPORTED_EXTENSION"});
          return false;
        }

        return true;
      },
      Checker = function(prefix) {
        var checker = {
          isNotEmptyString: function(options) {
            if (!(typeof options.value === "string" && options.value.length > 0)) {
              throw prefix + options.name + " must be a not empty string";
            }
          },
          isString: function(options) {
            if (!(typeof options.value === "string")) {
              throw prefix + options.name + " must be a string";
            }
          },
          isFunction: function(options) {
            if (!(options.value && typeof options.value === "function")) {
              throw prefix + options.name + " must be a function";
            }
          },
          isBoolean: function(options) {
            if (!(typeof options.value === "boolean")) {
              throw prefix + options.name + " must be a boolean";
            }
          },
          isNumber: function(options) {
            if (!(typeof options.value === "number")) {
              throw prefix + options.name + " must be a number";
            }
          },
          isNotEmptyArray: function(options) {
            if (!(options.value instanceof Array && options.value.length > 0)) {
              throw prefix + options.name + " must be a not empty array";
            }
          },
          isNotNull: function(options) {
            if (options.value == null) {
              throw prefix + options.name + " must not be null";
            }
          },
          isInputTag: function(options) {
            if (!(options.value && options.value.tagName && options.value.tagName === "INPUT")) {
              throw prefix + options.name + " must be an input tag";
            }
          },
          isFile: function(options) {
            if (!(window.File && options.value instanceof File)) {
              throw prefix + options.name + " must be a File";
            }
          }
        };
        return checker;
      },
      getIeVersion = function() {
        var word;
        var version = "N/A";
        var agent = navigator.userAgent.toLowerCase();
        var name = navigator.appName;

        // IE old version ( IE 10 or Lower )
        if (name == "Microsoft Internet Explorer") {
          word = "msie ";
        } else {
          word = "trident/.*rv:";
        }

        var reg = new RegExp(word + "([0-9]{1,})(\\.{0,}[0-9]{0,1})");

        if (reg.exec(agent) != null) version = RegExp.$1 + RegExp.$2;

        return parseInt(version, 10);
      },
      isAjaxMode = getXHR() !== undefined && window.File !== undefined && isCorsCapable(),
      phup = {};

    /*<GETUPLOADER>*/
    phup.getUploader = function(type, handler, options) {
      var body = document.getElementsByTagName("body")[0],
        checker = new Checker("[phup.js] usage : phup.getUploader(type, handler, options)\n[phup.js] error : "),
        uploaders = {
          /*<BASE64>*/
          BASE64: {
            upload: function(param) {
              var base64image = param && param.base64image,
                imageFileName = param && param.imageFileName,
                index = param && (param.index || 0),
                callback = "phup_callback_" + makeUniqueId(),
                child,
                done,
                timeoutOptions = {
                  index: index,
                  millisecond: timeout.millisecond,
                  handler: handler,
                  timeoutHandler: timeout.handler,
                  done: done,
                  callback: callback,
                  fileName: imageFileName
                };

              loadOptions(options);

              checker.isNotEmptyString({value: base64image, name: "param.base64image"});
              checker.isNotEmptyString({value: imageFileName, name: "param.imageFileName"});

              getSessionKey(function(sessionKey) {
                var xhr,
                  formData,
                  actionURL = getActionURL({
                    sslEnabled: sslEnabled,
                    domain: domain,
                    sessionKey: sessionKey,
                    userId: userId,
                    extractExif: extractExif,
                    extractAnimatedCnt: extractAnimatedCnt,
                    extractDominantColor: extractDominantColor,
                    autorotate: autorotate,
                    index: index,
                    type: type
                  });
                // sessionKey 검증
                if (validateSessionKey({
                  sessionKey: sessionKey,
                  handler: handler
                }) == false) {
                  return;
                }

                if (isAjaxMode) {
                  xhr = getXHR();
                  formData = new window.FormData();
                  formData.append("imageFileName", imageFileName),
                    formData.append("base64image", base64image),

                    xhr.onload = function() {
                      if (xhr.status === 200) {
                        handler(parseXMLResult(index, xhr.responseText));
                      } else {
                        handler({index: index, code: "CLIENT"});
                      }
                    };
                  xhr.open("POST", actionURL, true);
                  onstart && onstart({
                    index: index,
                    fileName: imageFileName,
                    xhr: xhr
                  });

                  if (timeout.millisecond > 0) {
                    xhr.timeout = timeout.millisecond;
                    xhr.ontimeout = function() {
                      timeout.handler({index: index, fileName: file.name});
                    };
                  }

                  xhr.send(formData);
                } else {
                  form = phupFrame.contentWindow.document.getElementById("phup_upload_form");

                  // Form 검증
                  if (validateIframe({
                    form: form,
                    handler: handler,
                    imageFileName: imageFileName,
                    allowedImageType: allowedImageType
                  }) == false) {
                    return;
                  }

                  // callback 등록
                  window[callback] = getIframeCallback(timeoutOptions);

                  // form 전송
                  for (child = form.firstChild; child != null; child = child.nextSibling) {
                    switch (child.id) {
                      case "phup_callback_func":
                        child.value = callback;
                        break;
                      case "imageFileName":
                        child.value = imageFileName;
                        child.disabled = null;
                        break;
                      case "base64image":
                        child.value = base64image;
                        child.disabled = null;
                        break;
                    }
                  }

                  form.action = getActionURL({
                    sslEnabled: sslEnabled,
                    domain: domain,
                    sessionKey: sessionKey,
                    userId: userId,
                    extractExif: extractExif,
                    extractAnimatedCnt: extractAnimatedCnt,
                    extractDominantColor: extractDominantColor,
                    autorotate: autorotate,
                    index: index,
                    type: type
                  });

                  onstart && onstart({
                    el: el,
                    index: index,
                    fileName: imageFileName
                  });

                  form.submit();

                  handleIframeTimeout(timeoutOptions);

                  form.reset();
                }
              });
            }
          }
          /*</BASE64>*/
          /*<SIMPLE>*/
          , SIMPLE: {
            upload: function(param) {
              var file = param && param.file,
                imageFileName = param && (param.imageFileName || ""),
                index = param && (param.index || 0),
                callback = "phup_callback_" + makeUniqueId(),
                done,
                timeoutOptions = {
                  index: index,
                  millisecond: timeout.millisecond,
                  handler: handler,
                  timeoutHandler: timeout.handler,
                  done: done,
                  callback: callback,
                  fileName: imageFileName
                };

              loadOptions(options);

              checker.isFile({value: file, name: "param.file"});
              checker.isString({value: imageFileName, name: "param.imageFileName"});

              getSessionKey(function(sessionKey) {
                var xhr,
                  formData,
                  actionURL = getActionURL({
                    sslEnabled: sslEnabled,
                    domain: domain,
                    sessionKey: sessionKey,
                    userId: userId,
                    extractExif: extractExif,
                    extractAnimatedCnt: extractAnimatedCnt,
                    extractDominantColor: extractDominantColor,
                    autorotate: autorotate,
                    index: index,
                    type: type
                  });
                // sessionKey 검증
                if (validateSessionKey({
                  sessionKey: sessionKey,
                  handler: handler
                }) == false) {
                  return;
                }

                if (isAjaxMode) {
                  xhr = getXHR();
                  formData = new window.FormData();
                  if (imageFileName.length > 0) {
                    formData.append("imageFileName", imageFileName);
                  }
                  formData.append("image", file),

                    xhr.onload = function() {
                      if (xhr.status === 200) {
                        handler(parseXMLResult(index, xhr.responseText));
                      } else {
                        handler({index: index, code: "CLIENT"});
                      }
                    };
                  xhr.open("POST", actionURL, true);
                  onstart && onstart({
                    index: index,
                    fileName: file.name,
                    xhr: xhr
                  });

                  if (timeout.millisecond > 0) {
                    xhr.timeout = timeout.millisecond;
                    xhr.ontimeout = function() {
                      timeout.handler({index: index, fileName: file.name});
                    };
                  }

                  xhr.send(formData);
                } else {
                  throw "[phup.js] error : SIMPLE uploader requires File & FormData";
                }
              });
            }
          }
          /*</SIMPLE>*/
        },
        uploader = uploaders[type],
        phupFrame,
        form,
        resourcePath,
        domain,
        userId,
        sslEnabled,
        extractExif,
        extractAnimatedCnt,
        extractDominantColor,
        autorotate,
        maxFileSize,
        allowedImageType,
        getSessionKey,
        timeout,
        onstart,
        type,
        loadOptions = function(options) {
          resourcePath = options && options.resourcePath || "";
          domain = options && options.domain;
          userId = options && options.userId;
          sslEnabled = options && (options.sslEnabled || false);
          extractExif = options && (options.extractExif || false);
          extractAnimatedCnt = options && (options.extractAnimatedCnt || false);
          extractDominantColor = options && (options.extractDominantColor || false);
          autorotate = options && (options.autorotate || false);
          maxFileSize = options && (options.maxFileSize || 10485760);
          allowedImageType = options && options.allowedImageType || ["png", "jpg", "jpeg", "bmp", "gif"];
          getSessionKey = options && options.getSessionKey;
          timeout = options && (options.timeout || {
            millisecond: 0, handler: function() {
            }
          });
          onstart = options && options.onstart;
          type = options && options.type || "";

          checker.isNotEmptyString({value: domain, name: "options.domain"});
          checker.isNotEmptyString({value: userId, name: "options.userId"});
          checker.isFunction({value: getSessionKey, name: "options.getSessionKey"});
          checker.isBoolean({value: sslEnabled, name: "options.sslEnabled"});
          checker.isBoolean({value: extractExif, name: "options.extractExif"});
          checker.isBoolean({value: extractAnimatedCnt, name: "options.extractAnimatedCnt"});
          checker.isBoolean({value: extractDominantColor, name: "options.extractDominantColor"});
          checker.isBoolean({value: autorotate, name: "options.autorotate"});
          checker.isNumber({value: maxFileSize, name: "options.maxFileSize"});
          checker.isNotEmptyArray({value: allowedImageType, name: "options.allowedImageType"});
          checker.isNumber({value: timeout.millisecond, name: "options.timeout.millisecond"});
          checker.isFunction({value: timeout.handler, name: "options.timeout.handler"});
          onstart && checker.isFunction({value: onstart, name: "options.onstart"});
          checker.isString({value: type, name: "options.type"});

          if (!phupFrame && !isAjaxMode) {
            phupFrame = appendHiddenFrame(body, resourcePath + "/phup_frame.html");
          }
        };

      checker.isNotEmptyString({value: type, name: "type"});

      checker.isNotNull({value: options, name: "options"});
      // options가 함수가 아닌 경우에는 바로 로드하고 그렇지 않으면 upload 호출시 로드
      if (!(typeof options === "function")) {
        loadOptions(options);
      }

      return uploader;
    };
    /*</GETUPLOADER>*/

    phup.config = function(el, handler, options) {
      var body = document.getElementsByTagName("body")[0],
        sessionKey,
        phupFrame,
        changeEvt,
        dummy = document.createElement("div"),
        onclick = el && el.onclick,
        onchange = el && el.onchange,
        multiple = el && el.multiple,
        resourcePath,
        domain,
        userId,
        sslEnabled,
        extractExif,
        extractAnimatedCnt,
        extractDominantColor,
        autorotate,
        maxFileSize,
        allowedImageType,
        getSessionKey,
        timeout,
        onstart,
        i,
        checker = new Checker("[phup.js] usage : phup.config(el, handler, options)\n[phup.js] error : "),
        type,
        loadOptions = function(options) {
          resourcePath = options && options.resourcePath || "",
            domain = options && options.domain,
            userId = options && options.userId,
            sslEnabled = options && (options.sslEnabled || false),
            extractExif = options && (options.extractExif || false),
            extractAnimatedCnt = options && (options.extractAnimatedCnt || false),
            extractDominantColor = options && (options.extractDominantColor || false),
            autorotate = options && (options.autorotate || false),
            maxFileSize = options && (options.maxFileSize || 10485760),
            allowedImageType = options && options.allowedImageType || ["png", "jpg", "jpeg", "bmp", "gif"],
            getSessionKey = options && options.getSessionKey;
          timeout = options && (options.timeout || {
            millisecond: 0, handler: function() {
            }
          });
          onstart = options && options.onstart;
          type = options && options.type || "";

          checker.isNotEmptyString({value: domain, name: "options.domain"});
          checker.isNotEmptyString({value: userId, name: "options.userId"});
          checker.isFunction({value: getSessionKey, name: "options.getSessionKey"});
          checker.isBoolean({value: sslEnabled, name: "options.sslEnabled"});
          checker.isBoolean({value: extractExif, name: "options.extractExif"});
          checker.isBoolean({value: extractAnimatedCnt, name: "options.extractAnimatedCnt"});
          checker.isBoolean({value: extractDominantColor, name: "options.extractDominantColor"});
          checker.isBoolean({value: autorotate, name: "options.autorotate"});
          checker.isNumber({value: maxFileSize, name: "options.maxFileSize"});
          checker.isNotEmptyArray({value: allowedImageType, name: "options.allowedImageType"});
          checker.isNumber({value: timeout.millisecond, name: "options.timeout.millisecond"});
          checker.isFunction({value: timeout.handler, name: "options.timeout.handler"});
          onstart && checker.isFunction({value: onstart, name: "options.onstart"});
          checker.isString({value: type, name: "options.type"});

          if (!phupFrame && !isAjaxMode) {
            phupFrame = appendHiddenFrame(body, resourcePath + "/phup_frame.html");
          }
        };

      checker.isInputTag({value: el, name: "el"});

      for (i in boundElements) {
        if (boundElements.hasOwnProperty(i)) {
          if (boundElements[i] == el) {
            throw "[phup.js] error : el is already bound with phup.js";
          }
        }
        ;
      }

      boundElements.push(el);

      checker.isFunction({value: handler, name: "handler"});

      checker.isNotNull({value: options, name: "options"});
      // options가 함수가 아닌 경우에는 바로 로드하고 그렇지 않으면 upload 호출시 로드
      if (!(typeof options === "function")) {
        loadOptions(options);
      }

      el.onclick = function(evt) {
        onclick && onclick(evt);

        if (typeof options === "function") {
          loadOptions(options());
        }

        getSessionKey(function(key) {
          sessionKey = key;
          if (changeEvt) {
            el.onupload(changeEvt);
          }
        });

        var isIE = false || !!document.documentMode;

        if (isIE) {
          var ieVersion = getIeVersion();
          if (ieVersion != 10) {
            var orgParent = el.parentNode;
            var orgNext = el.nextSibling;

            var tmp = document.createElement("form");
            tmp.appendChild(el);
            tmp.reset();

            orgParent.insertBefore(el, orgNext);
          } else {
            el.type = "radio";
            el.type = "file";
          }
        } else {
          el.value = "";
        }
      };

      if (isAjaxMode) {
        el.onupload = function() {
          var files = el.files,
            i;
          onchange && onchange();
          // el 검증
          if (validateEl({el: el}) == false) {
            return;
          }

          // sessionKey 검증
          if (validateSessionKey({
            sessionKey: sessionKey,
            handler: handler
          }) == false) {
            return;
          }

          for (i = 0; i < files.length; i += 1) {
            // input 검증
            if (isAllowedImageType(files[i].name, allowedImageType) === false) {
              handler({index: i, code: "UNSUPPORTED_EXTENSION"});
            } else if (files[i].size > maxFileSize) {
              handler({index: i, code: "LIMITATION_BY_IMAGE"});
            } else {
              uploadByAjax(
                el,
                i,
                files[i],
                handler,
                getActionURL({
                  sslEnabled: sslEnabled,
                  domain: domain,
                  sessionKey: sessionKey,
                  userId: userId,
                  extractExif: extractExif,
                  extractAnimatedCnt: extractAnimatedCnt,
                  extractDominantColor: extractDominantColor,
                  autorotate: autorotate,
                  index: i,
                  type: type
                }),
                timeout,
                onstart);
            }
          }
        };

        el.onchange = function(evt) {
          if (sessionKey) {
            el.onupload(evt);
            changeEvt = null;
          } else {
            changeEvt = evt;
          }
        };
      } else {
        // 여러파일 업로드 불가능한 브라우저는 하나만 선택할 수 있게 함
        el.multiple = false;

        el.onupload = function(evt) {
          var name = el.name,
            fileName = el.value.replace(/^C:\\fakepath\\/, ""), // input 태그를 조작하다보면 value 값이 없어지는 경우가 있기 때문에 먼저 뽑아놓음
            parentNode = el.parentNode,
            onclickft = el.onclick,
            form = phupFrame.contentWindow.document.getElementById("phup_upload_form"),
            callback = "phup_callback_" + makeUniqueId(),
            child,
            done,
            timeoutOptions = {
              index: 0,
              millisecond: timeout.millisecond,
              handler: function(options) {
                el.onclick = onclickft;
                handler(options);
              },
              timeoutHandler: function(options) {
                el.onclick = onclickft;
                timeout.handler(options);
              },
              done: done,
              callback: callback,
              fileName: fileName
            };
          onchange && onchange(evt);

          // el 검증
          if (validateEl({el: el}) == false) {
            return;
          }

          // sessionKey 검증
          if (validateSessionKey({
            sessionKey: sessionKey,
            handler: handler
          }) == false) {
            return;
          }

          // iframe 검증
          if (validateIframe({
            form: form,
            handler: handler,
            imageFileName: fileName,
            allowedImageType: allowedImageType
          }) == false) {
            return;
          }

          // callback 등록
          window[callback] = getIframeCallback(timeoutOptions);

          // input 태그 조작
          el.name = "image";
          el.onclick = function(evt) {
            // 이미지 input 태그가 딴데 가있는데 또 이벤트가 들어오면 곤란함
            if (evt && evt.preventDefault) {
              evt.preventDefault();
            }
          };
          parentNode.replaceChild(dummy, el);
          form.appendChild(el);

          // form 전송
          for (child = form.firstChild; child != null; child = child.nextSibling) {
            switch (child.id) {
              case "phup_callback_func":
                child.value = callback;
                break;
            }
          }

          form.action = getActionURL({
            sslEnabled: sslEnabled,
            domain: domain,
            sessionKey: sessionKey,
            userId: userId,
            extractExif: extractExif,
            extractAnimatedCnt: extractAnimatedCnt,
            extractDominantColor: extractDominantColor,
            autorotate: autorotate,
            index: 0,
            type: type
          });

          onstart && onstart({
            el: el,
            index: 0,
            fileName: fileName
          });

          form.submit();

          handleIframeTimeout(timeoutOptions);

          form.reset();

          // input 복구
          el.name = name;
          parentNode.replaceChild(el, dummy);
          el.onclick = onclickft;
        };

        el.onchange = function(evt) {
          if (sessionKey) {
            el.onupload(evt);
            changeEvt = null;
          } else {
            changeEvt = evt;
          }
        };
      }
    };
    return phup;
  };
  if ("undefined" === typeof(define)) {
    window.phup = new Phup();
  } else {
    define(function() {
      return new Phup();
    });
  }
})();
